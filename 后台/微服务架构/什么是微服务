引用<https://www.zhihu.com/question/65502802>
### 起源
#### 微服务进化过程
![](.什么是微服务_images/ef8d118c.png)
一级系统，缺点：
1.代码冗余
2.数据压力太大
3.部署困难
![](.什么是微服务_images/4f85e10f.png)
二级系统，缺点：
1.单点数据库，风险大，扩展难；
2.服务调用互相耦合
3.一个数据给多个应用使用，耦合性强
![](.什么是微服务_images/0e35b8b3.png)
三级系统，缺点
1.一旦发生故障，故障定位非常困难
2.一个服务故障可能引发雪崩，导致整个系统故障
3.稳定性下降，服务数量变多导致其中一个服务出现故障的概率大
#### 添加故障管理
![](.什么是微服务_images/ccb5045b.png)
![](.什么是微服务_images/62b68174.png)
#### 添加定位问题的链路跟踪
![](.什么是微服务_images/70a49c32.png)
![](.什么是微服务_images/6ed0f39b.png)
![](.什么是微服务_images/071b70dc.png)
链路跟踪理论参考<http://bigbully.github.io/Dapper-translation/>
#### 分析问题 - 日志分析
![](.什么是微服务_images/0ddf3456.png)
#### 网关 - 权限控制，服务治理
![](.什么是微服务_images/0cb59041.png)
#### 服务注册与发现 -动态扩容
![](.什么是微服务_images/125a86b3.png)
#### 熔断、服务降级、限流
熔断
![](.什么是微服务_images/b426aebc.png)
服务降级
当下游服务停止工作后，如果该服务并非核心业务，则上游服务应该降级，以保证核心业务不中断。比如网上超市下单界面有一个推荐商品凑单的功能，当推荐模块挂了后，下单功能不能一起挂掉，只需要暂时关闭推荐功能即可。
限流
一个服务挂掉后，上游服务或者用户一般会习惯性地重试访问。这导致一旦服务恢复正常，很可能因为瞬间网络流量过大又立刻挂掉，在棺材里重复着仰卧起坐。
![](.什么是微服务_images/6cbccab7.png)
#### **测试**
mock
![](.什么是微服务_images/ecf767d7.png)